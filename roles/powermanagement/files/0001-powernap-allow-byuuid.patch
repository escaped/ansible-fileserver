diff --git a/monitors/DiskMonitor.py b/monitors/DiskMonitor.py
index 5c5eb2e..a233877 100644
--- a/monitors/DiskMonitor.py
+++ b/monitors/DiskMonitor.py
@@ -28,6 +28,7 @@ class DiskMonitor ():
     def __init__(self, config):
         self._type = config['monitor']
         self._name = config['name']
+        self._device = config['device']
         self._regex_state = re.compile(r"^\s+drive\s+state\s+is:\s+(\S+)")
         self._regex_not_found = re.compile(r"^.*No\s+such\s+file")
         self._absent_seconds = 0
@@ -44,7 +45,11 @@ class DiskMonitor ():
     # 'standby' or 'sleeping'.  Assume 'active/idle', except in case
     # where fuction returns 'No such file' error (e.g. unknown drive)
     def is_disk_active(self):
-        hdparm = commands.getoutput("hdparm -C /dev/%s" % self._name).splitlines()
+        if self._device == 'y' or self._device == 'yes':
+            # Necessary for backward compatibility with older configuration files.
+            hdparm = commands.getoutput("hdparm -C /dev/%s" % self._name).splitlines()
+        else:
+            hdparm = commands.getoutput("hdparm -C %s" % self._device).splitlines()
         is_active = True
         for line in hdparm:
             if self._regex_not_found.match(line):
diff --git a/powernap.py b/powernap.py
index 04ee1c2..69b626c 100644
--- a/powernap.py
+++ b/powernap.py
@@ -163,8 +163,8 @@ class PowerNap:
                 self.MONITORS.append({"monitor":monitor, "name":items[0], "port":eval(items[1]), "absent":self.ABSENT_SECONDS})
         if monitor == "WoLMonitor":
             self.MONITORS.append({"monitor":monitor, "name":items[0], "port":eval(items[1]), "absent":self.ABSENT_SECONDS})
-        if monitor == "DiskMonitor" and (items[1] == "y" or items[1] == "yes"):
-            self.MONITORS.append({"monitor":monitor, "name":items[0], "absent":self.ABSENT_SECONDS})
+        if monitor == "DiskMonitor" and (items[1] != "n" and items[1] != "no"):
+            self.MONITORS.append({"monitor":monitor, "name":items[0], "device":items[1], "absent":self.ABSENT_SECONDS})

     def get_monitors(self):
         monitor = []
